{"name": "test_login_all[USER]", "status": "broken", "statusDetails": {"message": "psycopg2.OperationalError: FATAL:  password authentication failed for user \"postgres\"", "trace": "worker_id = 'gw0'\n\n    @pytest.fixture(scope='session', autouse=True)\n    def prep_db(worker_id):\n        if worker_id == 'gw0' or worker_id == 'master':\n>           prepare_db()\n\n..\\conftest.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utilities\\db.py:14: in prepare_db\n    password=DB_PASS, host=DB_HOST) as conn:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndsn = 'dbname=rabotyNET user=postgres password=root host=localhost'\nconnection_factory = None, cursor_factory = None\nkwargs = {'dbname': 'rabotyNET', 'host': 'localhost', 'password': 'root', 'user': 'postgres'}\nkwasync = {}\n\n    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n        \"\"\"\n        Create a new database connection.\n    \n        The connection parameters can be specified as a string:\n    \n            conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n    \n        or using a set of keyword arguments:\n    \n            conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n    \n        Or as a mix of both. The basic connection parameters are:\n    \n        - *dbname*: the database name\n        - *database*: the database name (only as keyword argument)\n        - *user*: user name used to authenticate\n        - *password*: password used to authenticate\n        - *host*: database host address (defaults to UNIX socket if not provided)\n        - *port*: connection port number (defaults to 5432 if not provided)\n    \n        Using the *connection_factory* parameter a different class or connections\n        factory can be specified. It should be a callable object taking a dsn\n        argument.\n    \n        Using the *cursor_factory* parameter, a new default cursor factory will be\n        used by cursor().\n    \n        Using *async*=True an asynchronous connection will be created. *async_* is\n        a valid alias (for Python versions where ``async`` is a keyword).\n    \n        Any other keyword parameter will be passed to the underlying client\n        library: the list of supported parameters depends on the library version.\n    \n        \"\"\"\n        kwasync = {}\n        if 'async' in kwargs:\n            kwasync['async'] = kwargs.pop('async')\n        if 'async_' in kwargs:\n            kwasync['async_'] = kwargs.pop('async_')\n    \n        if dsn is None and not kwargs:\n            raise TypeError('missing dsn and no parameters')\n    \n        dsn = _ext.make_dsn(dsn, **kwargs)\n>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\nE       psycopg2.OperationalError: FATAL:  password authentication failed for user \"postgres\"\n\n..\\..\\..\\..\\..\\..\\..\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\psycopg2\\__init__.py:126: OperationalError"}, "description": "Reads person credentials and tries to login for all types of persons", "parameters": [{"name": "person", "value": "'USER'"}], "start": 1566659074223, "stop": 1566659074223, "uuid": "37ad0e7d-a9e0-4684-b56f-05b0e15e96c8", "historyId": "11d2aefb06c1a10ae8bc67ba5fd42507", "fullName": "tests.test_login_all#test_login_all[USER]", "labels": [{"name": "feature", "value": "Login all users"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_all"}, {"name": "subSuite"}, {"name": "host", "value": "DimaNotebook-PC"}, {"name": "thread", "value": "7032-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_all"}]}