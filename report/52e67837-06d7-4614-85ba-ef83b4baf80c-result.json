{"name": "test_all[APARTMENT]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=76.0.3809.100)", "trace": "app = <application.SeleniumTestBase object at 0x037FB5F0>, field = 'APARTMENT'\n\n    @allure.feature('Login all users')\n    @pytest.mark.parametrize('field', entry)\n    def test_all(app, field):\n        with allure.step('Click log in'):\n            app.header.select_option('Log in')\n            app.sign_in_page.login('USER')\n            app.header.select_option('Profile')\n            valid_entry = app.user_profile_page.enter_data_textbox(field, entry[field])\n            app.user_profile_page.click_update_profile()\n>           read = app.user_profile_page.read_data_textbox(field)\n\ntest_user_profile_positive.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\user_profile_page.py:32: in read_data_textbox\n    return self.browser.get_attr_value(self.locators.user_fields[key], 'ng-reflect-model')\n..\\driver_wrapper.py:68: in get_attr_value\n    WebDriverWait(self.driver, self.default_timeout).until(EC.element_to_be_clickable(locator))\n..\\..\\..\\..\\..\\..\\..\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\n..\\..\\..\\..\\..\\..\\..\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:298: in __call__\n    if element and element.is_enabled():\n..\\..\\..\\..\\..\\..\\..\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:159: in is_enabled\n    return self._execute(Command.IS_ELEMENT_ENABLED)['value']\n..\\..\\..\\..\\..\\..\\..\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\..\\..\\..\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x037FB530>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...x759233CA+18]\\\\n\\\\tRtlInitializeExceptionChain [0x77A29ED2+99]\\\\n\\\\tRtlInitializeExceptionChain [0x77A29EA5+54]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=76.0.3809.100)\n\n..\\..\\..\\..\\..\\..\\..\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: StaleElementReferenceException"}, "steps": [{"name": "Click log in", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=76.0.3809.100)\n\n", "trace": "  File \"C:\\Users\\DimaNotebook\\Google_Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\Task_tests\\tests\\test_user_profile_positive.py\", line 15, in test_all\n    read = app.user_profile_page.read_data_textbox(field)\n  File \"C:\\Users\\DimaNotebook\\Google_Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\Task_tests\\pages\\user_profile_page.py\", line 32, in read_data_textbox\n    return self.browser.get_attr_value(self.locators.user_fields[key], 'ng-reflect-model')\n  File \"C:\\Users\\DimaNotebook\\Google_Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\Task_tests\\driver_wrapper.py\", line 68, in get_attr_value\n    WebDriverWait(self.driver, self.default_timeout).until(EC.element_to_be_clickable(locator))\n  File \"C:\\Users\\DimaNotebook\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 71, in until\n    value = method(self._driver)\n  File \"C:\\Users\\DimaNotebook\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 298, in __call__\n    if element and element.is_enabled():\n  File \"C:\\Users\\DimaNotebook\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 159, in is_enabled\n    return self._execute(Command.IS_ELEMENT_ENABLED)['value']\n  File \"C:\\Users\\DimaNotebook\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Users\\DimaNotebook\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\DimaNotebook\\Google Drive\\SoftServe\\AutomationQC\\Selenium\\PyTest\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1565815748481, "stop": 1565815757278}], "parameters": [{"name": "field", "value": "'APARTMENT'"}], "start": 1565815748481, "stop": 1565815757535, "uuid": "41e471e1-c320-456c-bba0-515a44c997fd", "historyId": "2239e7e18fad118499e0396f4b1f746b", "fullName": "tests.test_user_profile_positive#test_all[APARTMENT]", "labels": [{"name": "feature", "value": "Login all users"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_profile_positive"}, {"name": "subSuite"}, {"name": "host", "value": "DimaNotebook-PC"}, {"name": "thread", "value": "4076-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_profile_positive"}]}